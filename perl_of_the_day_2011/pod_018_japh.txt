Today some fun

JAPH is a small Perl program which prints "Just another Perl hacker," 

Here are examples on CPAN:
  http://www.cpan.org/misc/japh

You can see programs written as a camel or as a double-helix, etc.

Here is the wikipedia page:
  http://en.wikipedia.org/wiki/Just_another_Perl_hacker

also google for 
   obfuscated perl
   obfuscated c
http://en.wikipedia.org/wiki/Obfuscated_Perl_Contest
http://www.ioccc.org/

example:
   http://www0.us.ioccc.org/years.html

Here is a famous Damian Conway's program which won and obfuscated contest:
=================================================================
#!/usr/local/bin/perl -sw 
$;=$/;seek+DATA,!++$/,!$s;$_=<DATA>;$s&&print||$g&&do{$y=($x||=20)*($y||8);sub 
i{sleep&f}sub'p{print$;x$=,join$;,$b=~/.{$x}/g}$j=$j;sub'f{pop}sub 
n{substr($b,&f%$y,3)=~tr,O,O,}sub'g{$f=&f-1;($w,$w,substr($b,&f,1),O)[n($f-$x)+ 
n($x+$f)-(substr($b,&f,1)eq+O)+n$f]||$w}$w="\40";$b=join'',@ARGV?<>:$_,$w 
x$y;$b=~s).)$&=~/\w/?O:$w)ge;substr($b,$y)=q++;$g='$i=0;$i?$b:$c=$b; 
substr+$c,$i,1,g$i;$g=~s?\d+?($&+1)%$y?e;$i-$y+1?eval$g:do{$i=-1;$b=$c;p;i 
1}';sub'e{eval$g;&e}e}||eval||die+No.$; 
__DATA__ 
if($j){{$^W=$|;*_=sub{$=+s=#([A-z])(.*)#=#$+$1#=g}} 
@s=(q[$_=sprintf+pop@s,@s],q[ 
if($j){{$^W=$|;*_=sub{$=+s=#([A-z])(.*)#=#$+$1#=g}}     #_The_Perl_Journal_# 
@s=(q[%s],q[%s])x2;%s;print"\n"x&_,$_;i$j;eval} 
])x2;$_=sprintf+pop@s,@s;print"\n"x&_,$_;i$j;eval}$/=$y;$"=",";print 
q<#!/usr/local/bin/perl -sw 
if(!$s){>.($_=<>).q<}else{@s=(q[printf+pop@s,@s],q[#!/usr/local/bin/perl -sw 
if(!$s){>.(s$%$%%$g,tr=[=[===tr=]=]=||&d,$_).q<}else{@s=(q[%s],q[%s])x2;%s} 
])x2;printf+pop@s,@s} 
> 
=================================================================
His code was called SelfGOL, and did one of four things: 
  1. played the game of life:  selfgol -g -x=width -y=height 
  2. printed itself as output:  selfgol -s 
  3. print a scrolling marquee:  selfgol -d="banner" 
  4. modify a program to print itself as output: selfgol progname 
It did all this in under 1000 bytes of code.
The code doesn't contain any regular control structures
(like while, if, unless, until, for).
It has some goto()s, some recursion, and some beautiful eval-crafted loops: 

  $g = '$i=0; 
        $i? $b : $c = $b; 
        substr +$c, $i, 1, g $i; 
        $g =~ s?\d+? ($&+1)%$y ?e; 
        $i - $y + 1 ? eval $g 
                    : do{ $b=$c; p; i }'; 

The best part is the self-replicating code, which uses the standard quine code: 
  @s=( 
    q[printf pop@s, @s], 
    q[@s=(q[%s],q[%s])x2;%s], 
  )x2; 
  printf pop @s, @s; 

Here is the famous Damian's quote:
  "The only thing better than self-modifying code is code that modifies itself before it does so."  



